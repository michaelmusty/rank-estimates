declare type RankDatabaseObject;
declare attributes RankDatabaseObject:
  RankDatabaseName, // MonStgElt
  RankDatabaseCoeffs, // SeqEnum
  RankDatabaseComputed, // BoolElt
  RankDatabaseConductor, // RngIntElt
  RankDatabaseRank, // RngIntElt
  RankDatabaseN, // RngIntElt
  RankDatabaseValue, // FldReElt
  RankDatabaseEstimate; // FldReElt

intrinsic 'eq'(s::RankDatabaseObject, t::RankDatabaseObject) -> BoolElt
  {Return whether s is equal to t.}
  isSame := true;
  for attr in GetAttributes(Type(s)) do
    if Type(s``attr) ne Type(t``attr) then
      isSame := false;
    elif s``attr ne t``attr then
      isSame := false;
    end if;
  end for;
  return isSame;
end intrinsic;

intrinsic RankDatabaseObjectInitialize() -> RankDatabaseObject
  {Create an empty RankDatabaseObject.}
  s := New(RankDatabaseObject);
  s`RankDatabaseName := "";
  s`RankDatabaseCoeffs := [];
  s`RankDatabaseComputed := false;
  s`RankDatabaseConductor := 0;
  s`RankDatabaseRank := 0;
  s`RankDatabaseN := 0;
  s`RankDatabaseValue := 0;
  s`RankDatabaseEstimate := 0;
  return s;
end intrinsic;

intrinsic Print(s::RankDatabaseObject)
  {Print RankDatabaseObject}
  if s`RankDatabaseComputed then
    printf "RankDatabaseObject %o has been computed:\n", s`RankDatabaseName;
  else
    printf "RankDatabaseObject %o has only been initialized:\n", s`RankDatabaseName;
  end if;
  printf "  Cremona Name = %o\n", s`RankDatabaseName;
  printf "  Conductor = %o\n", s`RankDatabaseConductor;
  printf "  Rank = %o\n", s`RankDatabaseRank;
  printf "  N = %o\n", s`RankDatabaseN;
  printf "  S_E(N) = %o\n", s`RankDatabaseValue;
  printf "  G_E(N) = %o\n", s`RankDatabaseEstimate;
end intrinsic;
